/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "key_values_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace key_value_database {

int _kCityValues[] = {
  City::GUAYAQUIL,
  City::QUITO,
  City::CUENCA,
  City::AMBATO
};
const char* _kCityNames[] = {
  "GUAYAQUIL",
  "QUITO",
  "CUENCA",
  "AMBATO"
};
const std::map<int, const char*> _City_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kCityValues, _kCityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Person::~Person() throw() {
}


void Person::__set_name(const std::string& val) {
  this->name = val;
}

void Person::__set_lastName(const std::string& val) {
  this->lastName = val;
}

void Person::__set_age(const int32_t val) {
  this->age = val;
}

void Person::__set_city(const City::type val) {
  this->city = val;
}

uint32_t Person::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastName);
          this->__isset.lastName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->age);
          this->__isset.age = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->city = (City::type)ecast0;
          this->__isset.city = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Person::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Person");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->lastName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("age", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->age);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("city", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->city);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Person &a, Person &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.lastName, b.lastName);
  swap(a.age, b.age);
  swap(a.city, b.city);
  swap(a.__isset, b.__isset);
}

Person::Person(const Person& other1) {
  name = other1.name;
  lastName = other1.lastName;
  age = other1.age;
  city = other1.city;
  __isset = other1.__isset;
}
Person& Person::operator=(const Person& other2) {
  name = other2.name;
  lastName = other2.lastName;
  age = other2.age;
  city = other2.city;
  __isset = other2.__isset;
  return *this;
}
void Person::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Person(";
  out << "name=" << to_string(name);
  out << ", " << "lastName=" << to_string(lastName);
  out << ", " << "age=" << to_string(age);
  out << ", " << "city=" << to_string(city);
  out << ")";
}

} // namespace
